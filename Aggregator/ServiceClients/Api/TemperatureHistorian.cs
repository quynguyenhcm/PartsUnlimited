/* 
 * IoT Historian API
 *
 * Sample API for keeping a history of IoT devices.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Aggregator.ServiceClients.Client;
using RestSharp;

namespace Aggregator.ServiceClients.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TemperatureHistorian : ITemperatureHistorian
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureHistorian"/> class.
        /// </summary>
        /// <returns></returns>
        public TemperatureHistorian(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureHistorian"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemperatureHistorian(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add data to the device history Adds a data point from an IoT device. Once saved, calculates the running average of the existing data, saves it idempotentently and returns it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Device Id</param>
        /// <param name="datapointId">Each data point needs to have a unique ID</param>
        /// <param name="timestamp">Timestamp when received from the device.</param>
        /// <param name="value">Value registered by the device.</param>
        /// <returns>float?</returns>
        public float? AddDeviceData (string deviceId, string datapointId, DateTime? timestamp, float? value)
        {
             ApiResponse<float?> localVarResponse = AddDeviceDataWithHttpInfo(deviceId, datapointId, timestamp, value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add data to the device history Adds a data point from an IoT device. Once saved, calculates the running average of the existing data, saves it idempotentently and returns it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Device Id</param>
        /// <param name="datapointId">Each data point needs to have a unique ID</param>
        /// <param name="timestamp">Timestamp when received from the device.</param>
        /// <param name="value">Value registered by the device.</param>
        /// <returns>ApiResponse of float?</returns>
        public ApiResponse< float? > AddDeviceDataWithHttpInfo (string deviceId, string datapointId, DateTime? timestamp, float? value)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->AddDeviceData");
            // verify the required parameter 'datapointId' is set
            if (datapointId == null)
                throw new ApiException(400, "Missing required parameter 'datapointId' when calling DefaultApi->AddDeviceData");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling DefaultApi->AddDeviceData");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling DefaultApi->AddDeviceData");

            var localVarPath = "/deviceData/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (datapointId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datapointId", datapointId)); // query parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDeviceData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<float?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (float?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(float?)));
        }

        /// <summary>
        /// Add data to the device history Adds a data point from an IoT device. Once saved, calculates the running average of the existing data, saves it idempotentently and returns it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Device Id</param>
        /// <param name="datapointId">Each data point needs to have a unique ID</param>
        /// <param name="timestamp">Timestamp when received from the device.</param>
        /// <param name="value">Value registered by the device.</param>
        /// <returns>Task of float?</returns>
        public async System.Threading.Tasks.Task<float?> AddDeviceDataAsync (string deviceId, string datapointId, DateTime? timestamp, float? value)
        {
             ApiResponse<float?> localVarResponse = await AddDeviceDataAsyncWithHttpInfo(deviceId, datapointId, timestamp, value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add data to the device history Adds a data point from an IoT device. Once saved, calculates the running average of the existing data, saves it idempotentently and returns it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceId">Device Id</param>
        /// <param name="datapointId">Each data point needs to have a unique ID</param>
        /// <param name="timestamp">Timestamp when received from the device.</param>
        /// <param name="value">Value registered by the device.</param>
        /// <returns>Task of ApiResponse (float?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<float?>> AddDeviceDataAsyncWithHttpInfo (string deviceId, string datapointId, DateTime? timestamp, float? value)
        {
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling DefaultApi->AddDeviceData");
            // verify the required parameter 'datapointId' is set
            if (datapointId == null)
                throw new ApiException(400, "Missing required parameter 'datapointId' when calling DefaultApi->AddDeviceData");
            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new ApiException(400, "Missing required parameter 'timestamp' when calling DefaultApi->AddDeviceData");
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling DefaultApi->AddDeviceData");

            var localVarPath = "/deviceData/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter
            if (datapointId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "datapointId", datapointId)); // query parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDeviceData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<float?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (float?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(float?)));
        }

    }
}
