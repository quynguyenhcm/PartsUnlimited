swagger: '2.0'
info:
  version: 1.0.0
  title: IoT Aggregator API
  description: >-
    Sample API for aggregating data from multiple IoT devices and returning
    stored running averages.
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
schemes:
  - http
host: aggregator.api
basePath: /v1
produces:
  - application/json
consumes:
  - application/json
paths:
  /deviceData/{deviceType}/{deviceId}:
    post:
      summary: Add data generated from a device to the aggregator
      description: >-
        Adds a data point from an IoT device. The aggregator selects the
        historian service, posts data to it, and receives the running average.
        Then updates its store for the history of running averages by device id
        and type.
      operationId: addDeviceData
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/DeviceTypeParameter'
        - $ref: '#/parameters/DeviceIdParameter'
        - $ref: '#/parameters/DataPointIdParameter'
        - in: query
          name: value
          description: 'Value registered by the device.'
          required: true
          type: number
          format: float
      responses:
        201:
          description: Data added successfully.
        401:
          $ref: '#/responses/Standard401InvalidInput'
        500:
          $ref: '#/responses/Standard500ErrorResponse'
  /averageByDeviceType/{deviceType}:
    get:
      summary: Get the running averages of a device type given a date range.
      description: >-
        Returns the running average of a device type given a date range,
        averaged by the minute.
      parameters:
        - $ref: '#/parameters/DeviceTypeParameter'
        - in: query
          name: fromTime
          description: Start of the date range.
          required: true
          type: string
          format: date-time
        - in: query
          name: toTime
          description: End of the date range.
          required: true
          type: string
          format: date-time
      responses:
        200:
          description: Running averages per minute
          schema:
            $ref: '#/definitions/DeviceDataPoints'
        400:
          $ref: '#/responses/Standard401InvalidInput'
        500:
          $ref: '#/responses/Standard500ErrorResponse'
parameters:
  DeviceTypeParameter:
    in: path
    name: deviceType
    description: Device type
    required: true
    type: string
    enum:
      - temperature
      - humidity
      - barometricPressure
  DeviceIdParameter:
    in: path
    name: deviceId
    description: 'Device ID'
    required: true
    type: string
    pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
    minLength: 36
    maxLength: 36
  DataPointIdParameter:
    in: query
    name: dataPointId
    description: 'Each data point needs to have a unique ID'
    required: true
    type: string
    pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
    minLength: 36
    maxLength: 36
definitions:
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
  DeviceData:
    type: object
    properties:
      deviceId:
        type: string
      timestamp:
        type: string
        format: date-time
      value:
        type: number
        format: double
  DeviceDataPoints:
    type: array
    items:
      $ref: '#/definitions/DeviceData'
responses:
  Standard500ErrorResponse:
    description: An unexpected error occurred.
    schema:
      $ref: '#/definitions/Error'
  Standard401InvalidInput:
    description: Invalid input parameter.
    schema:
      $ref: '#/definitions/Error'