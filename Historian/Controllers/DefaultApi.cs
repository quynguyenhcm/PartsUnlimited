/*
 * IoT Historian API
 *
 * Sample API for keeping a history of IoT devices.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Historian.Attributes;
using Historian.Models;
using Historian.Services;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Swashbuckle.Swagger.Annotations;


namespace Historian.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DefaultApiController : Controller
    { 
        private readonly IStore store;
        private readonly ILogger logger;

        public DefaultApiController(IStore store, ILogger<DefaultApiController> logger)
        {
            this.store = store;
            this.logger = logger;
        }
        
        /// <summary>
        /// Add data to the device history
        /// </summary>
        /// <remarks>Adds a data point from an IoT device. Once saved, calculates the running average of the existing data, saves it idempotentently and returns it.</remarks>
        /// <param name="deviceId">Device Id</param>
        /// <param name="datapointId">Each data point needs to have a unique ID</param>
        /// <param name="timestamp">Timestamp when received from the device.</param>
        /// <param name="value">Value registered by the device.</param>
        /// <response code="201">Data added successfully.</response>
        /// <response code="400">Invalid input parameter.</response>
        /// <response code="500">An unexpected error occurred.</response>
        [HttpPost]
        [Route("/v1/deviceData/{deviceId}")]
      [ValidateModelState]
        [SwaggerOperation("AddDeviceData")]
        [SwaggerResponse(statusCode: 201, type: typeof(float?), description: "Data added successfully.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid input parameter.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "An unexpected error occurred.")]
        public virtual IActionResult AddDeviceData([FromRoute][Required][RegularExpression("/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/")] string deviceId, [FromQuery][Required()][RegularExpression("/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/")] string datapointId, [FromQuery][Required()]DateTime? timestamp, [FromQuery][Required()]float? value)
        {
            try
            {
                var key = $"{deviceId};{datapointId}";
                if (!this.store.Exists(key) && value.HasValue)
                {
                    this.store.Add(key, value.Value);
                    this.logger.LogInformation($"Added {value.Value} for {key} to the store at {timestamp}");
                }

                if (!value.HasValue)
                {
                    this.logger.LogError(($"No value found for {key}"));
                    return BadRequest(($"No data value for device: {deviceId} and datapoint {datapointId}"));
                }

             var average  = this.store.GetAll().Where(i => i.Key.StartsWith(deviceId)).Average(v => v.Value);

                this.logger.LogInformation($"Returning {average}.");
                return Created("", average);
            }
            catch (Exception e)
            {
                logger.LogError(e.StackTrace);
            }

            return UnprocessableEntity();

        }
    }
}
